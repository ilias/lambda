# ============================================================================
# Lambda Calculus Interpreter & stdlib.lambda Comprehensive Test Suite
# ============================================================================
# This file is designed to be loaded with :load tests.lambda
# It covers core features, numerals, booleans, lists, combinators, and more.
# Each test prints a result or checks an expected value.

# --- Boolean Logic ---
true 1 0                # expect 1
false 1 0               # expect 0
not true                # expect false
not false               # expect true
and true true           # expect true
and true false          # expect false
or true false           # expect true
xor true true           # expect false
if true 42 99           # expect 42
if false 42 99          # expect 99
eqBool true true        # expect true
eqBool true false       # expect false

# --- Church Numerals ---
zero (λx.1) 0           # expect 0
succ (succ zero)        # expect 2
plus 2 3                # expect 5
mult 3 4                # expect 12
pred 3                  # expect 2
minus 5 2               # expect 3
iszero 0                # expect true
iszero 1                # expect false
exp 2 3                 # expect 8


# --- Division and Modulo ---
div 7 2                  # expect 3
mod 7 2                  # expect 1


# --- Comparisons ---
leq 2 3                  # expect true
leq 3 2                  # expect false
eq 4 4                   # expect true
eq 4 5                   # expect false
gt 5 2                   # expect true
lt 2 5                   # expect true
neq 2 2                  # expect false
neq 2 3                  # expect true


# --- Numeric Operations ---
max 3 7                  # expect 7
min 3 7                  # expect 3
even 4                   # expect true
odd 5                    # expect true
square 6                 # expect 36
double 8                 # expect 16
half 9                   # expect 4
pow 2 5                  # expect 32


# --- List Operations ---
nil                              # expect nil
isnil nil                        # expect true
isnil (cons 1 nil)               # expect false
cons 1 (cons 2 (cons 3 nil))     # expect [1,2,3]
head (cons 1 (cons 2 (cons 3 nil)))          # expect 1
tail (cons 1 (cons 2 (cons 3 nil)))          # expect [2,3]
length (cons 1 (cons 2 (cons 3 nil)))        # expect 3
reverse (cons 1 (cons 2 (cons 3 nil)))       # expect [3,2,1]
append (cons 1 (cons 2 (cons 3 nil))) (cons 4 (cons 5 nil)) # expect [1,2,3,4,5]
map succ (cons 1 (cons 2 (cons 3 nil)))      # expect [2,3,4]
filter even (cons 1 (cons 2 (cons 3 (cons 4 nil)))) # expect [2,4]
foldr plus 0 (cons 1 (cons 2 (cons 3 nil)))  # expect 6
foldl plus 0 (cons 1 (cons 2 (cons 3 nil)))  # expect 6


# --- Advanced List Operations ---
range 5                  # expect [0,1,2,3,4]
countdown 3              # expect [3,2,1,0]
zip (cons 1 (cons 2 (cons 3 nil))) (cons 4 (cons 5 nil)) # expect [(1,4),(2,5)]
concat (cons (cons 1 (cons 2 (cons 3 nil))) (cons (cons 4 nil) nil)) # expect [1,2,3,4]


# --- Combinators and Utilities ---
K 42 99                  # expect 42
I 77                     # expect 77
S (K succ) (K 3) 0       # expect succ 0 = 1
B succ succ 1            # expect succ (succ 1) = 2
C minus 5 2              # expect minus 2 5 = 3


# --- Recursion and Advanced Functions ---
fact 5                   # expect 120
fib 7                    # expect 13
gcd 18 24                # expect 6
lcm 6 8                  # expect 24


# --- Infix Operators ---
2 + 3                    # expect 5
7 - 4                    # expect 3
3 * 4                    # expect 12
9 / 2                    # expect 4
9 % 4                    # expect 1
2 ^ 4                    # expect 16
true && false            # expect false
false || true            # expect true
5 == 5                   # expect true
5 != 4                   # expect true
2 < 3                    # expect true
2 <= 2                   # expect true
4 > 3                    # expect true
4 >= 4                   # expect true

# --- Maybe/Optional Type ---
just 42                        # expect just 42
nothing                        # expect nil
isJust (just 1)                # expect true
isNothing nothing              # expect true
fromJust (just 7)              # expect 7
fromMaybe 99 (just 5)          # expect 5
fromMaybe 99 nothing           # expect 99
maybe 0 succ (just 3)          # expect 4
maybe 0 succ nothing           # expect 0

# --- Either Type ---
left 1                         # expect left 1
right 2                        # expect right 2
isLeft (left 5)                # expect true
isRight (right 6)              # expect true
either succ pred (left 10)     # expect 11
either succ pred (right 10)    # expect 9

# --- Tree Data Structure ---
leaf 7                         # expect (7, (nil, nil))
node 1 (leaf 2) (leaf 3)       # expect (1, ((2, (nil, nil)), (3, (nil, nil))))
treeValue (leaf 8)             # expect 8
treeLeft (node 1 (leaf 2) (leaf 3))  # expect (2, (nil, nil))
treeRight (node 1 (leaf 2) (leaf 3)) # expect (3, (nil, nil))
isLeaf (leaf 9)                # expect true
isLeaf (node 1 (leaf 2) (leaf 3))    # expect false

# --- zipWith, scanl, scanr, find, partition, splitAt ---
zipWith plus (cons 1 (cons 2 nil)) (cons 10 (cons 20 nil)) # expect [11,22]
scanl plus 0 (cons 1 (cons 2 (cons 3 nil))) # expect [0,1,3,6]
scanr plus 0 (cons 1 (cons 2 (cons 3 nil))) # expect [6,5,3,0]
find (eq 2) (cons 1 (cons 2 (cons 3 nil)))  # expect 2
partition even (cons 1 (cons 2 (cons 3 (cons 4 nil)))) # expect ([2,4],[1,3])
splitAt 2 (cons 1 (cons 2 (cons 3 (cons 4 nil)))) # expect ([1,2],[3,4])

# --- Edge Cases and Safe Functions ---
safeMinimum nil                 # expect nothing
safeMaximum nil                 # expect nothing
safeMinimum (cons 3 (cons 1 (cons 2 nil))) # expect just 1
safeMaximum (cons 3 (cons 1 (cons 2 nil))) # expect just 3
clamp 2 4 1                    # expect 2
clamp 2 4 3                    # expect 3
clamp 2 4 5                    # expect 4

# --- Miscellaneous ---
compose succ succ 1             # expect 3
flip minus 2 5                  # expect 3
on plus succ 2 3                # expect 7
apply succ 4                    # expect 5
partial plus 2 3                # expect 5
partial2 plus 2 3 4             # expect 9
memoize succ 10                 # expect 11
id2 123                         # expect 123
const2 7 8                      # expect 7

# --- Additional List Operations ---
take 3 (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil))))) # expect [1,2,3]
drop 2 (cons 1 (cons 2 (cons 3 (cons 4 nil))))  # expect [3,4]
nth 2 (cons 10 (cons 20 (cons 30 (cons 40 nil)))) # expect 30
any (λx.gt x 3) (cons 1 (cons 2 (cons 5 nil)))   # expect true
all even (cons 2 (cons 4 (cons 6 nil)))          # expect true
all even (cons 2 (cons 3 (cons 6 nil)))          # expect false
sum (cons 1 (cons 2 (cons 3 (cons 4 nil))))      # expect 10
product (cons 2 (cons 3 (cons 4 nil)))           # expect 24
maximum (cons 1 (cons 5 (cons 3 (cons 2 nil))))  # expect 5
minimum (cons 4 (cons 1 (cons 3 (cons 2 nil))))  # expect 1

# --- Advanced List Utilities ---
elem 3 (cons 1 (cons 2 (cons 3 nil)))            # expect true
elem 5 (cons 1 (cons 2 (cons 3 nil)))            # expect false
notElem 5 (cons 1 (cons 2 (cons 3 nil)))         # expect true
nub (cons 1 (cons 2 (cons 1 (cons 3 (cons 2 nil))))) # expect [1,2,3]
unique (cons 1 (cons 2 (cons 1 (cons 3 nil))))   # expect [1,2,3]
last (cons 1 (cons 2 (cons 3 nil)))              # expect 3
init (cons 1 (cons 2 (cons 3 nil)))              # expect [1,2]
safeInit nil                                      # expect nil
safeInit (cons 1 nil)                            # expect nil

# --- Enumeration and Range Functions ---
enumFromTo 3 7                                   # expect [3,4,5,6,7]
enumFrom 5 4                                     # expect [5,6,7,8]
iota 4                                           # expect [0,1,2,3]
replicate 3 7                                    # expect [7,7,7]
repeat 3 9                                       # expect [9,9,9]

# --- Iteration and Application ---
iterate succ 5 0                                 # expect 5
times 3 succ 0                                   # expect 3
when true succ 5                                 # expect 6
when false succ 5                                # expect 5
unless true succ 5                               # expect 5
unless false succ 5                              # expect 6
cond true 42 99                                  # expect 42

# --- Pair Operations ---
pair 1 2                                      # expect (1,2)
first (pair 10 20)                            # expect 10
second (pair 10 20)                           # expect 20
swap (pair 1 2)                               # expect pair that when applied to f gives f 2 1

# --- Advanced Numeric Functions ---
abs 5                                         # expect 5 (Church numerals are non-negative)
sqrt 16                                       # expect approximately 4
sqrt 25                                       # expect 5
isPrime 7                                     # expect true
isPrime 8                                     # expect false
isPrime 2                                     # expect true
isPrime 1                                     # expect false
primes 10                                     # expect [2,3,5,7]

# --- String/Character Operations (treating numbers as char codes) ---
# Note: These are simplified for demo purposes
words (cons 104 (cons 101 (cons 108 (cons 108 (cons 111 nil))))) # expect simplified word list
unwords (cons (cons 104 (cons 105 nil)) (cons (cons 121 (cons 111 nil)) nil)) # expect joined with spaces

# --- Set Operations on Lists ---
union (cons 1 (cons 2 nil)) (cons 2 (cons 3 nil))  # expect [1,2,3]
intersect (cons 1 (cons 2 (cons 3 nil))) (cons 2 (cons 3 (cons 4 nil))) # expect [2,3]
difference (cons 1 (cons 2 (cons 3 nil))) (cons 2 (cons 4 nil))         # expect [1,3]
isSubset (cons 1 (cons 2 nil)) (cons 1 (cons 2 (cons 3 nil)))           # expect true
isSuperset (cons 1 (cons 2 (cons 3 nil))) (cons 1 (cons 2 nil))         # expect true

# --- Advanced Combinators ---
omega I                                       # expect I (omega applied to identity)
mockingbird I                                 # expect I
thrush 5 succ                                 # expect 6
cardinal minus 3 10                           # expect 7
bluebird succ pred 5                          # expect 5
kestrel 42 99                                 # expect 42
warbler plus 3                                # expect 6
starling (K succ) (K 2) 0                     # expect 2

# --- Curry and Uncurry Functions ---
curry3 (λt.plus (first t) (plus (first (second t)) (second (second t)))) 1 2 3  # expect 6
uncurry plus (pair 7 3)                       # expect 10
uncurry3 (λx y z.plus x (plus y z)) (pair 1 (pair 2 3))  # expect 6

# --- More Maybe/Optional Operations ---
maybeMap succ (just 5)                        # expect just 6
maybeMap succ nothing                         # expect nothing

# --- State Monad (simplified) ---
runState (returnState 42) 0                   # expect (42, 0)
runState getState 123                         # expect (123, 123)

# --- Advanced Tree Operations ---
treeSize (leaf 1)                             # expect 1
treeSize nil                                  # expect 0
treeDepth (leaf 1)                            # expect 1
treeDepth nil                                 # expect 0
inOrder (leaf 5)                              # expect [5]
preOrder (leaf 5)                             # expect [5]
postOrder (leaf 5)                            # expect [5]

# --- Edge Cases and Error Conditions ---
div 5 0                                       # expect 0 (division by zero returns 0)
mod 5 0                                       # expect 0 (modulo by zero returns 0)
head nil                                      # expect nil
tail nil                                      # expect nil
pred 0                                        # expect 0 (predecessor of 0 is 0)
minus 3 5                                     # expect 0 (Church arithmetic doesn't go negative)

# --- Complex Expressions ---
map (λx.mult x x) (range 5)                   # expect [0,1,4,9,16]
filter (λx.eq (mod x 3) 0) (range 10)         # expect [0,3,6,9]
foldr max 0 (cons 3 (cons 7 (cons 2 (cons 9 (cons 1 nil))))) # expect 9
foldl min 999 (cons 3 (cons 7 (cons 2 (cons 9 (cons 1 nil))))) # expect 1

# --- Recursive Function Tests ---
factRec 4                                     # expect 24
fibRec 6                                      # expect 8
sumUptoRec 5                                  # expect 15

# --- Performance and Stress Tests ---
length (range 50)                             # expect 50
sum (range 10)                                # expect 45
fact 6                                        # expect 720
fib 10                                        # expect 55

# --- test Y combinator ---
factY 4                                       # expect 24
fibY 6                                        # expect 8
sumUptoY 5                                    # expect 15
expY 2 5                                      # expect 32
rangeY 10                                     # expect [0,1,2,3,4,5,6,7,8,9]
countdownY 5                                  # expect [5,4,3,2,1,0]
gcdY 48 18                                    # expect 6
lcmY 12 15                                    # expect 60
mapY succ (range 5)                           # expect [1,2,3,4,5]
filterY (λx.eq (mod x 2) 0) (range 10)        # expect [0,2,4,6,8]
lengthY (range 50)                            # expect 50
reverseY (range 5)                            # expect [4,3,2,1,0]
sumY (range 5)                                # expect 10
productY (tail (range 7))                     # expect 720 - tail to avoid 0
anyY (λx.gt x 3) (range 5)                    # expect true
allY (λx.leq x 5) (range 5)                   # expect true
findY (λx.eq x 3) (range 5)                   # expect 3

[1, 2, 3]                                     # expect [1,2,3]
[1, 3 .. 6]                                   # expect [1,3,4,5,6]
[1,2,3,[4..7], [11 .. 8]]                     # expect [1,2,3,[4,5,6,7],[11,10,9,8]]

mapY (ackermann 2) [2..10]                    # expect [7, 9, 11, 13, 15, 17, 19, 21, 23]

# --- End of Test Suite ---
# Review the output for each test variable above.
# To run: :load stdlib.lambda, then :load tests.lambda