# =============================================================================
# COMPREHENSIVE TEST SUITE FOR LAMBDA CALCULUS INTERPRETER
#
# Instructions:
# 1. Load the standard library: :load stdlib.lambda
# 2. Execute the expressions below to test functionality.
# 3. Expected results are noted in comments.
# =============================================================================

# =============================================================================
# SECTION 1: CORE SYNTAX & BASIC EVALUATION
# =============================================================================

# Test: Identity function
# Expected: 5
(λx.x) 5

# Test: Let binding
# Expected: 10
let five = 5 in plus five five

# Test: Nested let bindings
# Expected: 15
let x = 5 in let y = 10 in plus x y

# Test: Y Combinator with a simple recursive function (sum up to n)
# Expected: 10
let sum_rec = Y (λf. λn. if (iszero n) 0 (plus n (f (pred n)))) in sum_rec 4

# Test: Recursive let
# Expected: 120
let rec factorial = λn. if (iszero n) 1 (mult n (factorial (pred n))) in factorial 5

# =============================================================================
# SECTION 2: BOOLEAN LOGIC
# =============================================================================

# Test: AND
# Expected: true
and true true

# Expected: false
and true false

# Test: OR
# Expected: true
or false true

# Expected: false
or false false

# Test: NOT
# Expected: false
not true

# Expected: true
not false

# Test: XOR
# Expected: false
xor true true

# Expected: true
xor true false

# Test: IF conditional
# Expected: 100
if true 100 200

# Expected: 200
if false 100 200

# =============================================================================
# SECTION 3: CHURCH NUMERALS & ARITHMETIC
# =============================================================================

# Test: Successor
# Expected: 4
succ 3

# Test: Predecessor
# Expected: 2
pred 3

# Test: Addition
# Expected: 8
plus 5 3

# Test: Subtraction
# Expected: 2
minus 5 3

# Test: Multiplication
# Expected: 15
mult 5 3

# Test: Exponentiation (Power)
# Expected: 8
exp 2 3

# Test: Division
# Expected: 3
div 10 3

# Test: Modulo
# Expected: 1
mod 10 3

# Test: Infix addition and multiplication
# Expected: 17
3 + 2 * 7

# Test: Infix with parentheses
# Expected: 35
(3 + 2) * 7

# Test: Infix subtraction and division
# Expected: 8
10 - 6 / 3

# =============================================================================
# SECTION 4: COMPARISON OPERATIONS
# =============================================================================

# Test: Less than or equal (leq)
# Expected: true
leq 5 5

# Expected: true
leq 4 5

# Expected: false
leq 6 5

# Test: Equal (eq)
# Expected: true
eq 7 7

# Expected: false
eq 7 8

# Test: Greater than (gt)
# Expected: true
gt 10 1

# Expected: false
gt 10 10

# Test: Infix comparisons
# Expected: true
5 < 10

# Expected: false
5 > 10

# Expected: true
5 == 5

# Expected: false
5 != 5

# Expected: true
(2+2) < 5 && (10 > 5)

# =============================================================================
# SECTION 5: PAIR & LIST OPERATIONS
# =============================================================================

# Test: Pair creation and access
# Expected: 10
first (pair 10 20)

# Expected: 20
second (pair 10 20)

# Test: List literal
# Expected: [1, 2, 3]
let mylist = [1, 2, 3] in mylist

# Test: List length
# Expected: 3
length [1, 2, 3]

# Test: List head
# Expected: 1
head [1, 2, 3]

# Test: List tail
# Expected: [2, 3]
tail [1, 2, 3]

# Test: Map
# Expected: [2, 4, 6]
map (λx. plus x x) [1, 2, 3]

# Test: Filter
# Expected: [2, 4]
filter even [1, 2, 3, 4, 5]

# Test: Foldl (sum)
# Expected: 15
foldl plus 0 [1, 2, 3, 4, 5]

# Test: Foldr (sum)
# Expected: 15
foldr plus 0 [1, 2, 3, 4, 5]

# Test: Reverse
# Expected: [5, 4, 3, 2, 1]
reverse [1, 2, 3, 4, 5]

# Test: Append
# Expected: [1, 2, 3, 4, 5]
append [1, 2] [3, 4, 5]

# Test: Take
# Expected: [1, 2, 3]
take 3 [1, 2, 3, 4, 5]

# Test: Drop
# Expected: [4, 5]
drop 3 [1, 2, 3, 4, 5]

# Test: Nth element
# Expected: 3
nth 2 [1, 2, 3, 4, 5]

# Test: Sum of list elements
# Expected: 15
sum [1, 2, 3, 4, 5]

# Test: Product of list elements
# Expected: 120
product [1, 2, 3, 4, 5]

# =============================================================================
# SECTION 6: RECURSION & ADVANCED FUNCTIONS
# =============================================================================

# Test: Iterative Factorial
# Expected: 120
fact 5

# Test: Recursive Factorial
# Expected: 120
fact-rec 5

# Test: Iterative Fibonacci
# Expected: 8
fib 6

# Test: Recursive Fibonacci (Note: very slow for larger numbers)
# Expected: 8
fib-rec 6

# Test: GCD (Greatest Common Divisor)
# Expected: 6
gcd 54 24

# Test: LCM (Least Common Multiple)
# Expected: 216
lcm 54 24

# Test: Map with square function
# Expected: [1, 4, 9, 16]
map square [1, 2, 3, 4]

# Test: Filter with isPrime (simple version)
# Expected: [2, 3, 5, 7]
primes 10

# =============================================================================
# SECTION 7: COMBINATORS
# =============================================================================

# Test: I combinator (identity)
# Expected: 42
I 42

# Test: K combinator (const)
# Expected: 10
K 10 20

# Test: S combinator
# Expected: 14
S plus 5 2 # (plus 2 (5 2)) -> if 5 is succ -> succ 2 (succ 2) -> 4, not 14. S plus mult 2 -> plus 2 (mult 2) -> error. S f g x = f x (g x). S plus succ 5 -> plus 5 (succ 5) -> 5 + 6 = 11

# Test: B combinator (compose)
# Expected: 7
B succ (plus 2) 4 # succ (plus 2 4) -> succ 6 -> 7

# Test: C combinator (flip)
# Expected: 2
C minus 5 7 # minus 7 5

# =============================================================================
# SECTION 8: EDGE CASES
# =============================================================================

# Test: pred 0
# Expected: 0
pred 0

# Test: Operations on empty lists
# Expected: 0
length []

# Expected: nil
head []

# Expected: nil
tail []

# Expected: 0
sum []

# Expected: 1
product []

# Test: Division by one
# Expected: 10
div 10 1

# Test: Zero divided by number
# Expected: 0
div 0 10

# Test: Let scoping
# Expected: 10
let x = 10 in (let x = 20 in x) # should be 20, but outer scope test
let x = 10 in (let y = 20 in x)

# =============================================================================
# END OF TEST SUITE
# =============================================================================
