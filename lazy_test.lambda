# Test lazy evaluation with a potentially infinite computation
# that is not used

# This defines an infinite loop (omega combinator)
omega = (\x.x x) (\x.x x)

# This function takes two arguments but only uses the first
const = \x.\y.x

# Test: const should return 42 without evaluating omega
# In lazy evaluation, this should work fine
# In eager evaluation, this would loop forever
test_lazy = const @42 omega

# Another test: conditional evaluation
# Only one branch should be evaluated
test_cond = if true @100 omega
