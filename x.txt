can we add a macro system that will be able to handle all the following existing feature
let x = e1 in e2
let x = e1, y = e2 in e3
let rec x = e1 in e2
e1 |> e2 |> e3
e1 . e2 . e3
[a, b, c]
[a, b .. c, d]
x -> e1
x, y -> e1
x + y
x -> e1
x, y -> e1
Use a different parse class to replace the old one. 
With the macro system we should be able to not only have the current feature available
but also expand the syntactic sugar and make more robust.


implement a macro system that is flexible. Here is an idea for one

:macro (name pattern) => transformation

and here are some examples

:macro (when $cond $body) => (if $cond $body unit)
:macro (unless $cond $body) => (if $cond unit $body)
:macro (compose $f $g) => (\x. $f ($g x))
:macro (flip $f) => (\x y. $f y x)

I am open to a better or more flexible design.